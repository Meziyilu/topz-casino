// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String
  name     String?
  isAdmin  Boolean @default(false)

  // 餘額
  balance     Int @default(0) // 錢包
  bankBalance Int @default(0) // 銀行

  createdAt DateTime @default(now())

  // relations
  bets         Bet[]
  ledgers      Ledger[] @relation("UserLedgers")
  adminLedgers Ledger[] @relation("AdminActorLedgers")

  @@index([isAdmin])
}

enum BetSide {
  PLAYER
  BANKER
  TIE
  PLAYER_PAIR
  BANKER_PAIR
  ANY_PAIR
  PERFECT_PAIR
}

enum RoundOutcome {
  PLAYER
  BANKER
  TIE
}

enum RoundPhase {
  BETTING
  REVEAL
  SETTLED
}

enum RoomCode {
  R30 // 30秒房
  R60 // 60秒房
  R90 // 90秒房
}

model Room {
  id              String   @id @default(cuid())
  code            RoomCode @unique
  name            String
  durationSeconds Int
  createdAt       DateTime @default(now())

  rounds Round[]
  bets   Bet[]

  @@index([code])
}

/**
 * 每個房間每天的局序從 1 重新開始：
 * - 唯一鍵：(roomId, day, roundSeq)
 * - day：以台北當地日期 00:00 轉為 UTC 存入
 */
model Round {
  id       String   @id @default(cuid())
  roomId   String
  day      DateTime
  roundSeq Int

  phase       RoundPhase    @default(BETTING)
  outcome     RoundOutcome?
  playerTotal Int?
  bankerTotal Int?

  playerCards Json?
  bankerCards Json?

  playerPair  Boolean?
  bankerPair  Boolean?
  anyPair     Boolean?
  perfectPair Boolean?

  startedAt DateTime
  settledAt DateTime?
  createdAt DateTime  @default(now())

  room Room  @relation(fields: [roomId], references: [id])
  bets Bet[]

  @@unique([roomId, day, roundSeq])
  @@index([roomId, day])
}

/**
 * 下注記錄：
 * - 指向房間 + 當日 + 局序（即使 Round 尚未持久化，也能先寫單）
 * - 若已有對應 Round，可一併寫 roundId
 */
model Bet {
  id       String   @id @default(cuid())
  userId   String
  roomId   String
  day      DateTime
  roundSeq Int

  side      BetSide
  amount    Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  room    Room    @relation(fields: [roomId], references: [id])
  round   Round?  @relation(fields: [roundId], references: [id])
  roundId String?

  @@index([userId, roomId, createdAt])
  @@index([roomId, day, roundSeq])
}

enum LedgerType {
  ADMIN_ADJUST // 管理員人為調整
  TRANSFER_IN // 銀行→錢包
  TRANSFER_OUT // 錢包→銀行
  BET_PLACED // 下單（預留）
  BET_PAYOUT // 派彩（預留）
}

enum BalanceTarget {
  WALLET
  BANK
}

/**
 * 交易流水（審計用）
 */
model Ledger {
  id           String        @id @default(cuid())
  userId       String
  adminId      String? // 誰調的
  type         LedgerType
  target       BalanceTarget // 調整哪個錢包
  delta        Int // 正：加幣；負：扣幣
  memo         String? // 理由備註
  balanceAfter Int? // 若 target=WALLET 調完的錢包餘額
  bankAfter    Int? // 若 target=BANK   調完的銀行餘額
  createdAt    DateTime      @default(now())

  user  User  @relation("UserLedgers", fields: [userId], references: [id])
  admin User? @relation("AdminActorLedgers", fields: [adminId], references: [id])

  @@index([userId, createdAt])
  @@index([adminId])
  @@index([type, target])
}
