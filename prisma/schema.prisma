generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String   @id @default(cuid())
  email                       String   @unique
  password                    String
  name                        String?
  createdAt                   DateTime @default(now())
  balance                     Int      @default(0)
  bankBalance                 Int      @default(0)
  isAdmin                     Boolean  @default(false)
  bets                        Bet[]
  Ledger_Ledger_adminIdToUser Ledger[] @relation("Ledger_adminIdToUser")
  ledgers                     Ledger[]

  @@index([isAdmin])
}

model Ledger {
  id                        String        @id @default(cuid())
  userId                    String
  adminId                   String?
  type                      LedgerType
  target                    BalanceTarget
  delta                     Int
  memo                      String?
  balanceAfter              Int?
  bankAfter                 Int?
  createdAt                 DateTime      @default(now())
  User_Ledger_adminIdToUser User?         @relation("Ledger_adminIdToUser", fields: [adminId], references: [id])
  user                      User          @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([adminId])
  @@index([type, target])
}

model Room {
  id              String   @id @default(cuid())
  code            RoomCode @unique
  name            String
  durationSeconds Int
  createdAt       DateTime @default(now())
  bets            Bet[]
  rounds          Round[]

  @@index([code])
}

model Round {
  id          String        @id @default(cuid())
  roomId      String
  day         DateTime
  roundSeq    Int
  phase       RoundPhase    @default(BETTING)
  outcome     RoundOutcome?
  playerTotal Int?
  bankerTotal Int?
  playerCards Json?
  bankerCards Json?
  playerPair  Boolean?
  bankerPair  Boolean?
  anyPair     Boolean?
  perfectPair Boolean?
  startedAt   DateTime
  settledAt   DateTime?
  createdAt   DateTime      @default(now())
  bets        Bet[]
  room        Room          @relation(fields: [roomId], references: [id])

  @@unique([roomId, day, roundSeq])
  @@index([roomId, day])
}

model Bet {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  day       DateTime
  roundSeq  Int
  side      BetSide
  amount    Int
  createdAt DateTime @default(now())
  roundId   String?
  room      Room     @relation(fields: [roomId], references: [id])
  round     Round?   @relation(fields: [roundId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([roomId, day, roundSeq])
  @@index([userId, roomId, createdAt])
}

enum LedgerType {
  ADMIN_ADJUST
  TRANSFER_IN
  TRANSFER_OUT
  BET_PLACED
  BET_PAYOUT
}

enum BalanceTarget {
  WALLET
  BANK
}

enum RoomCode {
  R30
  R60
  R90
}

enum RoundPhase {
  BETTING
  REVEAL
  SETTLED
}

enum RoundOutcome {
  PLAYER
  BANKER
  TIE
}

enum BetSide {
  PLAYER
  BANKER
  TIE
  PLAYER_PAIR
  BANKER_PAIR
  ANY_PAIR
  PERFECT_PAIR
}
