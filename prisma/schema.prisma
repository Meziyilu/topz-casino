generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String
  name                String?
  avatarUrl           String?
  isAdmin             Boolean              @default(false)
  balance             Int                  @default(0)
  bankBalance         Int                  @default(0)
  createdAt           DateTime             @default(now())
  nickname            String?
  about               String?
  country             String?
  lastSeenAt          DateTime?
  xp                  Int                  @default(0)
  level               Int                  @default(1)
  vipTier             Int                  @default(0)
  vipExpireAt         DateTime?
  headframe           HeadframeCode        @default(NONE)
  panelStyle          PanelPreset          @default(GLASS_DARK)
  panelTint           String?
  publicSlug          String?              @unique
  totalBets           Int                  @default(0)
  totalStaked         BigInt               @default(0)
  totalPayout         BigInt               @default(0)
  totalWins           Int                  @default(0)
  totalLosses         Int                  @default(0)
  netProfit           BigInt               @default(0)
  weeklyNetProfit     BigInt               @default(0)
  favoriteGame        String?
  displayName         String               @unique
  isBanned            Boolean              @default(false)
  isMuted             Boolean              @default(false)
  emailVerifiedAt     DateTime?
  registeredIp        String?
  lastLoginAt         DateTime?
  lastLoginIp         String?
  referralCode        String?              @unique
  inviterId           String?
  bets                Bet[]
  chatMessages        ChatMessage[]
  checkinClaims       DailyCheckinClaim[]
  emailVerifyToken    EmailVerifyToken?
  eventParticipations EventParticipation[]
  topups              ExternalTopup[]
  friendsA            Friendship[]         @relation("friendA")
  friendsB            Friendship[]         @relation("friendB")
  ledgers             Ledger[]
  lottoBets           LottoBet[]
  passwordResetToken  PasswordResetToken?
  promoImpressions    PromoImpression[]
  rewardClaims        RewardClaim[]
  rounds              Round[]              @relation("RoundDealer")
  sicboBets           SicBoBet[]
  sicboRoundsDealt    SicBoRound[]         @relation("SicBoDealer")
  inviter             User?                @relation("InviteRelation", fields: [inviterId], references: [id])
  invitees            User[]               @relation("InviteRelation")
  achievements        UserAchievement[]
  badges              UserBadge[]
  checkinState        UserCheckinState?
  collectibles        UserCollectible[]
  personaTags         UserPersonaTag[]
  profileModules      UserProfileModule[]
  profileSettings     UserProfileSettings?
  statSnapshots       UserStatSnapshot[]
  wallComments        WallComment[]
  likes               WallLike[]
  posts               WallPost[]
}

model Ledger {
  id           String         @id @default(cuid())
  userId       String
  type         LedgerType
  target       BalanceTarget
  amount       Int
  createdAt    DateTime       @default(now())
  roundId      String?
  room         RoomCode?
  sicboRoundId String?
  sicboRoom    SicBoRoomCode?
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([room, createdAt])
  @@index([roundId])
  @@index([sicboRoom, createdAt])
  @@index([sicboRoundId])
}

model GameConfig {
  id          String   @id @default(cuid())
  gameCode    GameCode
  key         String
  valueString String?
  valueInt    Int?
  valueInt    BigInt?
  valueFloat  Float?
  valueBool   Boolean?
  json        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([gameCode, key])
  @@index([gameCode, key])
}

model UserProfileSettings {
  userId     String   @id
  layoutJson Json?
  bgImageUrl String?
  bgBlur     Int      @default(10)
  bgDim      Int      @default(20)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfileModule {
  id        String            @id @default(cuid())
  userId    String
  code      ProfileModuleCode
  enabled   Boolean           @default(true)
  sortOrder Int               @default(100)
  config    Json?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, code])
  @@index([userId, sortOrder])
}

model Badge {
  id         String      @id @default(cuid())
  code       String      @unique
  name       String
  iconUrl    String?
  rarity     Int         @default(1)
  animated   Boolean     @default(false)
  desc       String?
  createdAt  DateTime    @default(now())
  userBadges UserBadge[]
}

model UserBadge {
  id         String   @id @default(cuid())
  userId     String
  badgeId    String
  pinned     Boolean  @default(false)
  level      Int      @default(1)
  acquiredAt DateTime @default(now())
  badge      Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId, pinned])
}

model Achievement {
  id               String            @id @default(cuid())
  code             String            @unique
  name             String
  desc             String?
  target           Int               @default(1)
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  progress      Int         @default(0)
  unlocked      Boolean     @default(false)
  unlockedAt    DateTime?
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId, unlocked])
}

model UserPersonaTag {
  id        String   @id @default(cuid())
  userId    String
  tag       String
  score     Int      @default(0)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tag])
}

model Collectible {
  id               String            @id @default(cuid())
  code             String            @unique
  name             String
  imageUrl         String?
  type             String
  rarity           Int               @default(1)
  userCollectibles UserCollectible[]
}

model UserCollectible {
  id            String      @id @default(cuid())
  userId        String
  collectibleId String
  quantity      Int         @default(1)
  favorite      Boolean     @default(false)
  acquiredAt    DateTime    @default(now())
  collectible   Collectible @relation(fields: [collectibleId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, collectibleId])
  @@index([userId, favorite])
}

model Friendship {
  id      String   @id @default(cuid())
  userAId String
  userBId String
  since   DateTime @default(now())
  weight  Int      @default(0)
  userA   User     @relation("friendA", fields: [userAId], references: [id], onDelete: Cascade)
  userB   User     @relation("friendB", fields: [userBId], references: [id], onDelete: Cascade)

  @@unique([userAId, userBId])
  @@index([userAId])
  @@index([userBId])
}

model EventParticipation {
  id       String   @id @default(cuid())
  userId   String
  eventId  String
  rank     Int?
  reward   Int      @default(0)
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, eventId])
}

model WallPost {
  id        String        @id @default(cuid())
  userId    String
  body      String
  imageUrl  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  hidden    Boolean       @default(false)
  comments  WallComment[]
  likes     WallLike[]
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model WallComment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  body      String
  createdAt DateTime @default(now())
  hidden    Boolean  @default(false)
  post      WallPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId, createdAt])
}

model WallLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      WallPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  enabled   Boolean  @default(true)
}

model MarqueeMessage {
  id        String   @id @default(cuid())
  text      String
  priority  Int      @default(0)
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
}

model Round {
  id         String        @id @default(cuid())
  room       RoomCode
  phase      RoundPhase
  outcome    RoundOutcome?
  startedAt  DateTime      @default(now())
  endedAt    DateTime?
  endsAt     DateTime
  day        String
  seq        Int
  shoeJson   String
  resultJson String?
  dealerId   String?
  bets       Bet[]
  dealer     User?         @relation("RoundDealer", fields: [dealerId], references: [id])

  @@unique([room, day, seq])
  @@index([room, startedAt])
}

model Bet {
  id        String   @id @default(cuid())
  userId    String
  roundId   String
  side      BetSide
  amount    Int
  createdAt DateTime @default(now())
  round     Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roundId, side])
  @@index([userId, createdAt])
}

model LottoDraw {
  id        String     @id @default(cuid())
  code      Int
  drawAt    DateTime
  numbers   Int[]
  special   Int?
  pool      Int        @default(0)
  jackpot   Int        @default(0)
  status    String     @default("OPEN")
  createdAt DateTime   @default(now())
  day       DateTime   @default(now())
  daySeq    Int        @default(1)
  bets      LottoBet[]

  @@unique([day, daySeq])
  @@index([day, daySeq])
}

model LottoBet {
  id         String      @id @default(cuid())
  userId     String
  drawId     String
  picks      Int[]
  special    Int?
  amount     Int
  createdAt  DateTime    @default(now())
  tailParity TailParity?
  tailSize   TailSize?
  draw       LottoDraw   @relation(fields: [drawId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([drawId])
  @@index([drawId, tailParity])
  @@index([drawId, tailSize])
}

model SicBoRound {
  id        String        @id @default(cuid())
  room      SicBoRoomCode
  phase     SicBoPhase
  dice      Int[]
  startedAt DateTime      @default(now())
  endedAt   DateTime?
  dealerId  String?
  bets      SicBoBet[]
  dealer    User?         @relation("SicBoDealer", fields: [dealerId], references: [id])
}

model SicBoBet {
  id        String       @id @default(cuid())
  userId    String
  roundId   String
  kind      SicBoBetKind
  amount    Int
  payload   Json?
  createdAt DateTime     @default(now())
  round     SicBoRound   @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roundId, kind])
  @@index([userId, createdAt])
}

model UserStatSnapshot {
  id          String     @id @default(cuid())
  userId      String
  period      StatPeriod
  windowStart DateTime
  windowEnd   DateTime
  room        RoomCode?
  gameBet     BigInt     @default(0)
  gamePayout  BigInt     @default(0)
  bonusIncome BigInt     @default(0)
  betsCount   Int        @default(0)
  winsCount   Int        @default(0)
  lossesCount Int        @default(0)
  netProfit   BigInt     @default(0)
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period, windowStart, windowEnd, room])
  @@index([period, room, windowStart, netProfit])
  @@index([userId, period, room])
}

model UserCheckinState {
  userId          String    @id
  lastClaimedYmd  DateTime?
  streak          Int       @default(0)
  totalClaims     Int       @default(0)
  nextAvailableAt DateTime?
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyCheckinClaim {
  id           String   @id @default(cuid())
  userId       String
  ymd          DateTime
  amount       Int
  streakBefore Int
  streakAfter  Int
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ymd])
  @@index([userId, createdAt])
}

model RewardCampaign {
  id             String             @id @default(cuid())
  code           String             @unique
  kind           RewardCampaignKind
  title          String
  subtitle       String?
  body           String?
  imageUrl       String?
  popupTrigger   PopupTrigger       @default(LOGIN)
  autoPopup      Boolean            @default(true)
  enabled        Boolean            @default(true)
  priority       Int                @default(100)
  coinAmount     Int                @default(0)
  claimOnce      Boolean            @default(true)
  startAt        DateTime?
  endAt          DateTime?
  minTopupAmount Int?
  topupSince     DateTime?
  topupUntil     DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  impressions    PromoImpression[]
  claims         RewardClaim[]

  @@index([enabled, priority])
  @@index([kind, startAt, endAt])
}

model RewardClaim {
  id         String         @id @default(cuid())
  campaignId String
  userId     String
  amount     Int            @default(0)
  createdAt  DateTime       @default(now())
  campaign   RewardCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([campaignId, userId])
  @@index([userId, createdAt])
}

model PromoImpression {
  id         String         @id @default(cuid())
  campaignId String
  userId     String
  shownAt    DateTime       @default(now())
  campaign   RewardCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, campaignId, shownAt])
}

model ExternalTopup {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  status    String   @default("COMPLETED")
  provider  String?
  refCode   String?  @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model ChatMessage {
  id        String          @id @default(cuid())
  room      String
  userId    String
  type      ChatMessageType @default(USER)
  body      String
  hidden    Boolean         @default(false)
  createdAt DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([room, createdAt])
  @@index([userId, createdAt])
}

model EmailVerifyToken {
  id        String    @id @default(cuid())
  userId    String    @unique
  token     String    @unique
  expiredAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String    @unique
  token     String    @unique
  expiredAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum HeadframeCode {
  NONE
  GOLD
  NEON
  CRYSTAL
  DRAGON
}

enum PanelPreset {
  GLASS_LIGHT
  GLASS_DARK
  NEON_PURPLE
  AURORA
  CYBERPUNK
}

enum ProfileModuleCode {
  AVATAR_FRAME
  BASIC_INFO
  BADGES
  STATS
  QUICK_ACTIONS
  PERSONA_TAGS
  COLLECTIONS
  ACHIEVE_PROGRESS
  FRIENDS
  EVENTS
  WALL
  RARE_SHOWCASE
  EDITOR
  AI_RECO
  VIP_PERKS
  HISTORY
  FEED
}

enum LedgerType {
  DEPOSIT
  WITHDRAW
  TRANSFER
  BET_PLACED
  PAYOUT
  ADMIN_ADJUST
  CHECKIN_BONUS
  EVENT_REWARD
  TOPUP_BONUS
  EXTERNAL_TOPUP
}

enum BalanceTarget {
  WALLET
  BANK
}

enum StatPeriod {
  DAILY
  WEEKLY
  ALL_TIME
}

enum RewardCampaignKind {
  EVENT
  TOPUP
}

enum PopupTrigger {
  LOGIN
  MANUAL
}

enum ChatMessageType {
  USER
  SYSTEM
}

enum GameCode {
  GLOBAL
  BACCARAT
  LOTTO
  SICBO
}

enum RoomCode {
  R30
  R60
  R90
}

enum RoundPhase {
  BETTING
  REVEALING
  SETTLED
}

enum RoundOutcome {
  PLAYER
  BANKER
  TIE
}

enum BetSide {
  PLAYER
  BANKER
  TIE
  PLAYER_PAIR
  BANKER_PAIR
  ANY_PAIR
  PERFECT_PAIR
  BANKER_SUPER_SIX
}

enum SicBoRoomCode {
  SB_R30
  SB_R60
  SB_R90
}

enum SicBoPhase {
  BETTING
  REVEALING
  SETTLED
}

enum SicBoBetKind {
  BIG
  SMALL
  ODD
  EVEN
  ANY_TRIPLE
  SPECIFIC_TRIPLE
  SPECIFIC_DOUBLE
  TOTAL
  COMBINATION
  SINGLE_DIE
}

enum TailParity {
  ODD
  EVEN
}

enum TailSize {
  BIG
  SMALL
}
