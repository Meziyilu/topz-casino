// prisma/schema.prisma — TOPZ Casino v1.1.1 + Bank 2.0 (+ Lotto 1.0)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*
 * ======================== Enums ========================
*/

enum LedgerType {
  DEPOSIT       // 充值（錢包→銀行）
  WITHDRAW      // 提領（銀行→錢包）
  BET_PLACED    // 下單（扣款）
  PAYOUT        // 派彩（加款）
  TRANSFER      // 內部轉帳（含 P2P 與資產內部位移）
  ADMIN_ADJUST  // 管理員調整
}

enum BalanceTarget {
  WALLET
  BANK
}

enum RoomCode {
  R30
  R60
  R90
}

enum RoundPhase {
  BETTING
  REVEALING
  SETTLED
}

enum RoundOutcome {
  PLAYER
  BANKER
  TIE
}

enum BetSide {
  PLAYER
  BANKER
  TIE
  PLAYER_PAIR
  BANKER_PAIR
}

/* ----------- 新增：大樂透使用的 Enums ----------- */

enum LottoRoundStatus {
  OPEN
  LOCKED
  DRAWN
  SETTLED
}

enum LottoBetKind {
  PICKS           // 一般選號（6/49）
  SPECIAL_ODD     // 特別號「單」
  SPECIAL_EVEN    // 特別號「雙」
  BALL_ATTR       // 各球屬性（第1~6球的大/小/單/雙）
}

enum LottoAttr {
  BIG
  SMALL
  ODD
  EVEN
}

enum BetStatus {
  PENDING
  WON
  LOST
  PAID
  CANCELED
}

/*
 * ======================== Models ========================
*/

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String?
  avatarUrl   String?
  isAdmin     Boolean  @default(false)
  balance     Int      @default(0) // 錢包
  bankBalance Int      @default(0) // 銀行
  createdAt   DateTime @default(now())

  // relations
  bets          Bet[]
  ledgers       Ledger[]
  dailyCheckins DailyCheckin[]

  // NEW: 大樂透下注
  lottoBets     LottoBet[]

  @@index([createdAt])
}

model Ledger {
  id           String        @id @default(cuid())
  userId       String
  type         LedgerType
  target       BalanceTarget           // ✅ 舊欄位：保留相容（推薦仍寫入）
  delta        Int                     // ✅ 舊欄位：保留相容（正負變動，推薦仍寫入）
  memo         String?
  balanceAfter Int                     // 當下錢包餘額
  bankAfter    Int                     // 當下銀行餘額
  createdAt    DateTime      @default(now())

  // --------- 新增（銀行 2.0） ---------
  fromTarget       BalanceTarget?      // 來源（存款=WALLET、提款=BANK、P2P=null）
  toTarget         BalanceTarget?      // 去向（存款=BANK、提款=WALLET、P2P=null）
  amount           Int?                // 名目金額（通常=|delta|）
  fee              Int?                // 手續費（>0 表平台收入）
  idempotencyKey   String?  @unique    // 冪等鍵
  transferGroupId  String?             // 雙分錄關聯（P2P）
  peerUserId       String?             // 對手方（P2P）
  meta             Json?               // 擴充：IP、AML flags、來源等

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([transferGroupId])
  @@index([peerUserId, createdAt])
}

model Room {
  id              String   @id @default(cuid())
  code            RoomCode @unique
  name            String
  durationSeconds Int
  createdAt       DateTime @default(now())

  rounds Round[]
  bets   Bet[]
}

model Round {
  id     String @id @default(cuid())
  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  day      DateTime   // 台北當日 00:00（以 UTC 儲存）
  roundSeq Int
  phase    RoundPhase @default(BETTING)

  createdAt DateTime  @default(now())
  startedAt DateTime
  settledAt DateTime?

  // 結果
  outcome     RoundOutcome?
  playerTotal Int?
  bankerTotal Int?
  playerPair  Boolean?
  bankerPair  Boolean?
  anyPair     Boolean?
  perfectPair Boolean?
  playerCards Json?
  bankerCards Json?

  bets Bet[]

  @@unique([roomId, day, roundSeq])
  @@index([roomId, day, roundSeq])
  @@index([phase])
  @@index([createdAt])
}

model Bet {
  id        String   @id @default(cuid())
  userId    String
  roundId   String
  roomId    String
  side      BetSide
  amount    Int
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)
  room  Room  @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([roundId, userId])
  @@index([userId, createdAt])
}

model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String
  enabled   Boolean   @default(true)
  startAt   DateTime?
  endAt     DateTime?
  createdAt DateTime  @default(now())

  @@index([enabled, createdAt])
}

model MarqueeMessage {
  id        String   @id @default(cuid())
  text      String
  enabled   Boolean  @default(true)
  priority  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([enabled, priority, createdAt])
}

model DailyCheckin {
  id        String   @id @default(cuid())
  userId    String
  day       DateTime // 台北當日 00:00（以 UTC 儲存）
  reward    Int
  streak    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, day])
  @@index([userId, day])
}

/* ======================== NEW: Lotto Models ======================== */

model LottoRound {
  id        String            @id @default(cuid())
  code      Int               @unique           // 期號（遞增）
  drawAt    DateTime
  status    LottoRoundStatus  @default(OPEN)
  numbers   Int[]                              // 開出 6 顆
  special   Int?                               // 特別號
  pool      Int               @default(0)      // 累積獎池
  jackpot   Int               @default(0)      // 當期頭獎實際發出
  createdAt DateTime          @default(now())

  bets      LottoBet[]
}

model LottoBet {
  id         String        @id @default(cuid())
  userId     String
  roundId    String
  kind       LottoBetKind               // PICKS / SPECIAL_ODD / SPECIAL_EVEN / BALL_ATTR
  picks      Int[]                      // kind=PICKS：6 顆；其他留空
  picksKey   String        @default("-")// 例如 "1-8-19-20-33-42"
  ballIndex  Int?                        // kind=BALL_ATTR：第幾球（1~6）
  attr       LottoAttr?                  // BIG/SMALL/ODD/EVEN
  amount     Int
  status     BetStatus     @default(PENDING)
  payout     Int           @default(0)
  matched    Int           @default(0)  // 命中幾顆（不含特別號）
  hitSpecial Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  round  LottoRound @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@index([roundId])
  @@index([userId])

  // 去重策略：PICKS 與 BALL_ATTR 分開保證唯一，避免 NULL 參與複合唯一
  @@unique([userId, roundId, kind, picksKey])                    // for PICKS / SPECIAL_*
  @@unique([userId, roundId, kind, ballIndex, attr])             // for BALL_ATTR
}

/* ======================== NEW: Config ======================== */
/**
 * 集中遊戲配置（倍率、封盤秒數、大小門檻、下注檔位、抽成比例等）
 * key 範例：
 * - "lotto.config"
 */
model GameConfig {
  key       String @id
  value     Json
  updatedAt DateTime @updatedAt
}
