// prisma/schema.prisma — TOPZ Casino v1.1.1 + Bank 2.0

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*
 * ======================== Enums ========================
*/

enum LedgerType {
  DEPOSIT       // 充值（錢包→銀行）
  WITHDRAW      // 提領（銀行→錢包）
  BET_PLACED    // 下單（扣款）
  PAYOUT        // 派彩（加款）
  TRANSFER      // 內部轉帳（含 P2P 與資產內部位移）
  ADMIN_ADJUST  // 管理員調整
}

enum BalanceTarget {
  WALLET
  BANK
}

enum RoomCode {
  R30
  R60
  R90
}

enum RoundPhase {
  BETTING
  REVEALING
  SETTLED
}

enum RoundOutcome {
  PLAYER
  BANKER
  TIE
}

enum BetSide {
  PLAYER
  BANKER
  TIE
  PLAYER_PAIR
  BANKER_PAIR
}

/*
 * ======================== Models ========================
*/

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String?
  avatarUrl   String?
  isAdmin     Boolean  @default(false)
  balance     Int      @default(0) // 錢包
  bankBalance Int      @default(0) // 銀行
  createdAt   DateTime @default(now())

  // relations
  bets          Bet[]
  ledgers       Ledger[]
  dailyCheckins DailyCheckin[]

  @@index([createdAt])
}

model Ledger {
  id           String        @id @default(cuid())
  userId       String
  type         LedgerType
  target       BalanceTarget           // ✅ 舊欄位：保留相容（推薦仍寫入）
  delta        Int                     // ✅ 舊欄位：保留相容（正負變動，推薦仍寫入）
  memo         String?
  balanceAfter Int                     // 當下錢包餘額
  bankAfter    Int                     // 當下銀行餘額
  createdAt    DateTime      @default(now())

  // --------- 新增（銀行 2.0） ---------
  fromTarget       BalanceTarget?      // 來源（存款=WALLET、提款=BANK、P2P=null）
  toTarget         BalanceTarget?      // 去向（存款=BANK、提款=WALLET、P2P=null）
  amount           Int?                // 名目金額（通常=|delta|）
  fee              Int?                // 手續費（>0 表平台收入）
  idempotencyKey   String?  @unique    // 冪等鍵
  transferGroupId  String?             // 雙分錄關聯（P2P）
  peerUserId       String?             // 對手方（P2P）
  meta             Json?               // 擴充：IP、AML flags、來源等

  // （可選進階：若日後要更清楚的資產位移，可再加）
  // deltaWallet     Int?              // 實際影響 wallet 的變動
  // deltaBank       Int?              // 實際影響 bank 的變動

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([transferGroupId])
  @@index([peerUserId, createdAt])
}

model Room {
  id              String   @id @default(cuid())
  code            RoomCode @unique
  name            String
  durationSeconds Int
  createdAt       DateTime @default(now())

  rounds Round[]
  bets   Bet[]
}

model Round {
  id     String @id @default(cuid())
  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  day      DateTime   // 台北當日 00:00（以 UTC 儲存）
  roundSeq Int
  phase    RoundPhase @default(BETTING)

  createdAt DateTime  @default(now())
  startedAt DateTime
  settledAt DateTime?

  // 結果
  outcome     RoundOutcome?
  playerTotal Int?
  bankerTotal Int?
  playerPair  Boolean?
  bankerPair  Boolean?
  anyPair     Boolean?
  perfectPair Boolean?
  playerCards Json?
  bankerCards Json?

  bets Bet[]

  @@unique([roomId, day, roundSeq])
  @@index([roomId, day, roundSeq])
  @@index([phase])
  @@index([createdAt])
}

model Bet {
  id        String   @id @default(cuid())
  userId    String
  roundId   String
  roomId    String
  side      BetSide
  amount    Int
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)
  room  Room  @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([roundId, userId])
  @@index([userId, createdAt])
}

model Announcement {
  id        String    @id @default(cuid())
  title     String
  content   String
  enabled   Boolean   @default(true)
  startAt   DateTime?
  endAt     DateTime?
  createdAt DateTime  @default(now())

  @@index([enabled, createdAt])
}

model MarqueeMessage {
  id        String   @id @default(cuid())
  text      String
  enabled   Boolean  @default(true)
  priority  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([enabled, priority, createdAt])
}

model DailyCheckin {
  id        String   @id @default(cuid())
  userId    String
  day       DateTime // 台北當日 00:00（以 UTC 儲存）
  reward    Int
  streak    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, day])
  @@index([userId, day])
}
