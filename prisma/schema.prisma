generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  isAdmin     Boolean  @default(false)
  name        String?
  balance     Int      @default(0)   // 錢包餘額
  bankBalance Int      @default(0)   // 銀行餘額

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bets        Bet[]
  ledgers     Ledger[]
  announcements Announcement[]
}

model Room {
  id              String   @id @default(cuid())
  code            String   @unique
  name            String
  durationSeconds Int      @default(60)

  createdAt DateTime @default(now())

  rounds    Round[]
  bets      Bet[]
}

model Round {
  id          String   @id @default(cuid())
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id])

  day         DateTime
  roundSeq    Int

  phase       RoundPhase @default(BETTING)

  outcome     Outcome?
  playerTotal Int?
  bankerTotal Int?
  playerPair  Boolean   @default(false)
  bankerPair  Boolean   @default(false)
  anyPair     Boolean   @default(false)
  perfectPair Boolean   @default(false)

  playerCards Json?
  bankerCards Json?

  createdAt   DateTime @default(now())
  startedAt   DateTime @default(now())
  settledAt   DateTime?

  bets        Bet[]

  @@unique([roomId, day, roundSeq])
}

model Bet {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  roundId   String
  round     Round    @relation(fields: [roundId], references: [id])

  roomId    String?  // allow null (舊資料相容)
  room      Room?    @relation(fields: [roomId], references: [id])

  side      BetSide
  amount    Int

  createdAt DateTime @default(now())
}

model Ledger {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])

  type        LedgerType
  target      LedgerTarget
  delta       Int
  memo        String?

  balanceAfter Int
  bankAfter    Int

  createdAt   DateTime @default(now())
}

model Announcement {
  id        String   @id @default(cuid())
  message   String
  isActive  Boolean  @default(true)

  createdById String?
  createdBy   User?     @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ----- Enums -----

enum RoundPhase {
  BETTING
  REVEALING
  SETTLED
}

enum Outcome {
  PLAYER
  BANKER
  TIE
}

enum BetSide {
  PLAYER
  BANKER
  TIE
  PLAYER_PAIR
  BANKER_PAIR
}

enum LedgerType {
  DEPOSIT
  WITHDRAW
  BET
  PAYOUT
  TRANSFER
}

enum LedgerTarget {
  WALLET
  BANK
}
