// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoomCode {
  R30
  R60
  R90
}

enum RoundPhase {
  BETTING
  REVEAL
  SETTLED
}

enum RoundOutcome {
  PLAYER
  BANKER
  TIE
}

enum BetSide {
  PLAYER
  BANKER
  TIE
  PLAYER_PAIR
  BANKER_PAIR
  ANY_PAIR
  PERFECT_PAIR
}

enum LedgerType {
  BET_PLACED    // 下注扣款
  BET_PAYOUT    // 派彩入帳
  TRANSFER      // 銀行 <-> 錢包 互轉
  ADMIN_ADJUST  // 管理員調整
}

enum BalanceTarget {
  WALLET
  BANK
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String?
  isAdmin      Boolean  @default(false)
  createdAt    DateTime @default(now())

  // 餘額
  balance      Int      @default(0) // 錢包
  bankBalance  Int      @default(0) // 銀行

  // 關聯
  bets         Bet[]
  ledgers      Ledger[]

  @@index([createdAt])
}

model Room {
  id              String    @id @default(cuid())
  code            RoomCode  @unique
  name            String
  durationSeconds Int
  createdAt       DateTime  @default(now())

  rounds          Round[]

  @@index([createdAt])
}

model Round {
  id           String       @id @default(cuid())
  roomId       String
  room         Room         @relation(fields: [roomId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // 舊欄位（可用來做相容/查詢）：真正邏輯以 startedAt/createdAt 為主
  day          DateTime     @default(now())

  roundSeq     Int
  phase        RoundPhase    @default(BETTING)
  outcome      RoundOutcome?

  createdAt    DateTime      @default(now())
  startedAt    DateTime      @default(now()) // 下注期開始（相位時鐘）
  settledAt    DateTime?

  // 牌/點數/附加資訊
  playerTotal  Int?
  bankerTotal  Int?
  playerCards  Json?
  bankerCards  Json?
  playerPair   Boolean?
  bankerPair   Boolean?
  anyPair      Boolean?
  perfectPair  Boolean?

  // 「台北當地日」— 由 DB 端運算產生（在 migration 中建 GENERATED ALWAYS AS）
  dayLocal     DateTime?     @db.Date @default(dbgenerated("(\"startedAt\" + interval '8 hours')::date"))

  bets         Bet[]

  // 索引 / 唯一鍵
  @@index([roomId, createdAt], map: "idx_round_room_createdAt")
  @@index([roomId, startedAt], map: "idx_round_room_startedAt")
  @@unique([roomId, dayLocal, roundSeq], map: "uniq_round_room_day_seq")
}

model Bet {
  id        String   @id @default(cuid())
  userId    String
  roundId   String
  side      BetSide
  amount    Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  round     Round    @relation(fields: [roundId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([roundId, side])
  @@index([roundId, userId])
  @@index([userId, createdAt])
}

model Ledger {
  id            String       @id @default(cuid())
  userId        String
  type          LedgerType
  target        BalanceTarget
  delta         Int
  memo          String?
  balanceAfter  Int
  bankAfter     Int
  createdAt     DateTime     @default(now())

  user          User         @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([userId, createdAt])
}
