generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ======================== Enums（單一處宣告，避免重複） ========================
 */
// Profile UI
enum HeadframeCode {
  NONE
  GOLD
  NEON
  CRYSTAL
  DRAGON
}

enum PanelPreset {
  GLASS_LIGHT
  GLASS_DARK
  NEON_PURPLE
  AURORA
  CYBERPUNK
}

enum ProfileModuleCode {
  ABOUT
  STATS
  BADGES
  INVENTORY
}

// 社交牆擴充
enum ChatMessageType {
  USER
  SYSTEM
}

// 金流
enum LedgerType {
  DEPOSIT
  WITHDRAW
  TRANSFER
  BET_PLACED
  PAYOUT
  ADMIN_ADJUST
  CHECKIN_BONUS
  EVENT_REWARD
  TOPUP_BONUS
  EXTERNAL_TOPUP
  SHOP_PURCHASE
  EXCHANGE
}

enum BalanceTarget {
  WALLET
  BANK
  DIAMOND
  TICKET
  GACHA_TICKET
}

// 遊戲全域
enum GameCode {
  GLOBAL
  BACCARAT
  LOTTO
  SICBO
  ROULETTE
  HORSE
  FIVE_MINUTE
  SLOTS
  BLACKJACK
}

enum StatPeriod {
  DAILY
  WEEKLY
  ALL_TIME
}

enum RewardCampaignKind {
  EVENT
  TOPUP
}

enum PopupTrigger {
  LOGIN
  MANUAL
}

// 百家樂
enum RoomCode {
  R30
  R60
  R90
}

enum RoundPhase {
  BETTING
  REVEALING
  SETTLED
}

enum RoundOutcome {
  PLAYER
  BANKER
  TIE
}

enum BetSide {
  PLAYER
  BANKER
  TIE
  PLAYER_PAIR
  BANKER_PAIR
  ANY_PAIR
  PERFECT_PAIR
  BANKER_SUPER_SIX
}

// 骰寶
enum SicBoRoomCode {
  SB_R30
  SB_R60
  SB_R90
}

enum SicBoPhase {
  BETTING
  REVEALING
  SETTLED
}

enum SicBoBetKind {
  BIG
  SMALL
  ODD
  EVEN
  ANY_TRIPLE
  SPECIFIC_TRIPLE
  SPECIFIC_DOUBLE
  TOTAL
  COMBINATION
  SINGLE_DIE
}

// 樂透
enum TailParity {
  ODD
  EVEN
}

enum TailSize {
  BIG
  SMALL
}

// 輪盤
enum RouletteRoomCode {
  RL_R30
  RL_R60
  RL_R90
}

enum RouletteBetKind {
  STRAIGHT
  SPLIT
  STREET
  CORNER
  LINE
  DOZEN
  COLUMN
  RED_BLACK
  ODD_EVEN
  LOW_HIGH
}

// 賽馬
enum HorseTrackCode {
  TURF_DIRT_SPRINT
  TURF_DIRT_CLASSIC
  TURF_LONG
}

enum HorseBetKind {
  WIN
  PLACE
  SHOW
  EXACTA
  TRIFECTA
  QUINELLA
}

// 5分彩
enum FiveRoomCode {
  FM_R5
  FM_R10
}

enum FiveBetKind {
  BIG
  SMALL
  ODD
  EVEN
  SUM_RANGE
  POSITION_PICK
}

// 拉霸
enum SlotRoomCode {
  SLOT_LOBBY
  SLOT_VIP
}

// 21點
enum BJTableRoomCode {
  BJ_TBL_R30
  BJ_TBL_R60
  BJ_TBL_R90
}

enum BJPhase {
  WAITING
  BETTING
  DEALING
  PLAYER_ACTION
  DEALER_ACTION
  SETTLED
}

enum BJOutcome {
  PLAYER_WIN
  DEALER_WIN
  PUSH
  SURRENDER
  BLACKJACK
}

enum BJAction {
  HIT
  STAND
  DOUBLE
  SPLIT
  SURRENDER
  INSURANCE
}

// 商城
enum ShopItemKind {
  HEADFRAME
  BADGE
  BUNDLE
  CURRENCY
  OTHER
}

enum ShopCurrency {
  COIN
  DIAMOND
  TICKET
  GACHA_TICKET
}

// 背包 / Jackpot / DM / 封鎖
enum InventoryItemType {
  HEADFRAME
  BADGE
  GIFT_CARD
  COLLECTIBLE
  OTHER
}

enum JackpotDrawStatus {
  PENDING
  SELECTED
  PAID
  CANCELED
}

enum DirectMessageKind {
  TEXT
  SYSTEM
  PAYOUT_NOTICE
  POPUP_NOTICE
}

enum BlockLevel {
  CHAT_ONLY
  DM_ONLY
  ALL
}

/**
 * ======================== 使用者核心 ========================
 */
model User {
  id          String  @id @default(cuid())
  email       String  @unique
  password    String
  displayName String  @unique
  avatarUrl   String?
  name        String?
  nickname    String?
  about       String?
  country     String?
  isAdmin     Boolean @default(false)
  isBanned    Boolean @default(false)
  isMuted     Boolean @default(false)

  // 登入資訊
  createdAt       DateTime  @default(now())
  lastSeenAt      DateTime?
  registeredIp    String?
  lastLoginAt     DateTime?
  lastLoginIp     String?
  emailVerifiedAt DateTime?

  // 成長 / VIP
  xp           Int       @default(0)
  level        Int       @default(1)
  vipTier      Int       @default(0)
  vipExpireAt  DateTime?
  favoriteGame String?

  // Balance / 多幣別
  balance            Int @default(0)
  bankBalance        Int @default(0)
  diamondBalance     Int @default(0)
  ticketBalance      Int @default(0)
  gachaTicketBalance Int @default(0)

  // Profile UI
  headframe  HeadframeCode @default(NONE)
  panelStyle PanelPreset   @default(GLASS_DARK)
  panelTint  String?
  publicSlug String?       @unique

  // Stats
  totalBets       Int    @default(0)
  totalStaked     BigInt @default(0)
  totalPayout     BigInt @default(0)
  totalWins       Int    @default(0)
  totalLosses     Int    @default(0)
  netProfit       BigInt @default(0)
  weeklyNetProfit BigInt @default(0)

  referralCode String? @unique
  inviterId    String?
  inviter      User?   @relation("InviteRelation", fields: [inviterId], references: [id])
  invitees     User[]  @relation("InviteRelation")

  // ✅ 這裡加：ReferralPayout 的反向關係
  referralPayoutsAsInviter ReferralPayout[] @relation("ReferralInviter")
  referralPayoutsAsInvitee ReferralPayout[] @relation("ReferralInvitee")

  // ===== Relations（既有）=====
  bets               Bet[]
  rounds             Round[]              @relation("RoundDealer")
  sicboBets          SicBoBet[]
  sicboRoundsDealt   SicBoRound[]         @relation("SicBoDealer")
  lottoBets          LottoBet[]
  ledgers            Ledger[]
  chatMessages       ChatMessage[]
  checkinClaims      DailyCheckinClaim[]
  checkinState       UserCheckinState?
  emailVerifyToken   EmailVerifyToken?
  passwordResetToken PasswordResetToken?
  friendsA           Friendship[]         @relation("friendA")
  friendsB           Friendship[]         @relation("friendB")
  badges             UserBadge[]
  collectibles       UserCollectible[]
  profileModules     UserProfileModule[]
  profileSettings    UserProfileSettings?
  statSnapshots      UserStatSnapshot[]
  wallComments       WallComment[]
  likes              WallLike[]
  posts              WallPost[]
  topups             ExternalTopup[]
  promoImpressions   PromoImpression[]
  rewardClaims       RewardClaim[]
  ShopPurchase       ShopPurchase[]
  giftsSent          Gift[]               @relation("GiftSender")
  giftsReceived      Gift[]               @relation("GiftReceiver")
  kudosGiven         UserKudos[]          @relation("KudosFrom")
  kudosReceived      UserKudos[]          @relation("KudosTo")
  blocksAsBlocker    UserBlock[]          @relation("Blocker")
  blocksAsBlocked    UserBlock[]          @relation("Blocked")
  directMessages     DirectMessage[]      @relation("UserSent")
  directParticipants DirectParticipant[]
  presences          RoomPresence[]
  userAchievements   UserAchievement[]

  // ===== 新增 / 反向關係 =====
  rouletteBets           RouletteBet[]
  horseBets              HorseBet[]
  fiveMinuteBets         FiveMinuteBet[]
  slotSpins              SlotSpin[]
  blackjackPersonalGames BlackjackPersonalGame[]
  blackjackTableSeats    BlackjackTableSeat[]
  blackjackTableBets     BlackjackTableBet[]
  blackjackTableActions  BlackjackTableAction[]
  voiceParticipants      VoiceParticipant[]
  voiceSessions          VoiceSession[]
  jackpotContributions   JackpotContribution[]
  jackpotDailyWins       JackpotDailyDraw[]      @relation("UserSelected")
  lobbyPopupAcks         LobbyPopupAck[]
  directReadReceipts     DirectReadReceipt[]
  followers              Follow[]                @relation("FollowFollowee")
  followings             Follow[]                @relation("FollowFollower")
  notifications          Notification[]
  pushTokens             PushToken[]
  devices                UserDevice[]
  sessions               UserSession[]
  twoFactorSecret        TwoFactorSecret?
  riskScore              RiskScore?
  kycProfile             KycProfile?
  cashRequests           CashRequest[]
  balanceSnapshots       BalanceSnapshot[]
  adminAudits            AdminAuditLog[]

  // 個人頁造訪反向
  profileVisitsAsProfile ProfileVisit[] @relation("ProfileUser")
  profileVisitsAsViewer  ProfileVisit[] @relation("ProfileViewer")

  // 背包
  inventories UserInventory[]
}

/**
 * ======================== Profile 設定 ========================
 */
model UserProfileSettings {
  userId     String   @id
  layoutJson Json?
  bgImageUrl String?
  bgBlur     Int      @default(10)
  bgDim      Int      @default(20)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfileModule {
  id        String            @id @default(cuid())
  userId    String
  code      ProfileModuleCode
  enabled   Boolean           @default(true)
  sortOrder Int               @default(100)
  config    Json?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, code])
}

/**
 * ======================== Badge / 成就 / 收藏 ========================
 */
model Badge {
  id         String      @id @default(cuid())
  code       String      @unique
  name       String
  iconUrl    String?
  rarity     Int         @default(1)
  animated   Boolean     @default(false)
  desc       String?
  createdAt  DateTime    @default(now())
  userBadges UserBadge[]
}

model UserBadge {
  id         String   @id @default(cuid())
  userId     String
  badgeId    String
  pinned     Boolean  @default(false)
  level      Int      @default(1)
  acquiredAt DateTime @default(now())
  badge      Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

model Achievement {
  id               String            @id @default(cuid())
  code             String            @unique
  name             String
  desc             String?
  target           Int               @default(1)
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  progress      Int         @default(0)
  unlocked      Boolean     @default(false)
  unlockedAt    DateTime?
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Collectible {
  id               String            @id @default(cuid())
  code             String            @unique
  name             String
  imageUrl         String?
  type             String
  rarity           Int               @default(1)
  userCollectibles UserCollectible[]
}

model UserCollectible {
  id            String      @id @default(cuid())
  userId        String
  collectibleId String
  quantity      Int         @default(1)
  favorite      Boolean     @default(false)
  acquiredAt    DateTime    @default(now())
  collectible   Collectible @relation(fields: [collectibleId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, collectibleId])
}

/**
 * ======================== Friends / 社交牆 ========================
 */
model Friendship {
  id      String   @id @default(cuid())
  userAId String
  userBId String
  since   DateTime @default(now())
  weight  Int      @default(0)
  userA   User     @relation("friendA", fields: [userAId], references: [id], onDelete: Cascade)
  userB   User     @relation("friendB", fields: [userBId], references: [id], onDelete: Cascade)

  @@unique([userAId, userBId])
}

model WallPost {
  id        String        @id @default(cuid())
  userId    String
  body      String
  imageUrl  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  hidden    Boolean       @default(false)
  comments  WallComment[]
  likes     WallLike[]
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  medias PostMedia[]
}

model WallComment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  body      String
  createdAt DateTime @default(now())
  hidden    Boolean  @default(false)
  post      WallPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WallLike {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      WallPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

/**
 * ======================== 金融：帳務 / 配置 ========================
 */
model Ledger {
  id        String        @id @default(cuid())
  userId    String
  type      LedgerType
  target    BalanceTarget
  amount    Int
  createdAt DateTime      @default(now())

  // 遊戲追蹤
  roundId      String?
  room         RoomCode?
  sicboRoundId String?
  sicboRoom    SicBoRoomCode?

  meta Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([room, createdAt])
  @@index([roundId])
  @@index([sicboRoom, createdAt])
  @@index([sicboRoundId])
}

model GameConfig {
  id          String   @id @default(cuid())
  gameCode    GameCode
  key         String
  valueString String?
  valueInt    BigInt?
  valueFloat  Float?
  valueBool   Boolean?
  json        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([gameCode, key])
  @@index([gameCode, key])
}

/**
 * ======================== 公告 / 跑馬燈 ========================
 */
model Announcement {
  id        String    @id @default(cuid())
  title     String
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  enabled   Boolean   @default(true)
  startAt   DateTime?
  endAt     DateTime?
}

model MarqueeMessage {
  id        String    @id @default(cuid())
  text      String
  priority  Int       @default(0)
  enabled   Boolean   @default(true)
  createdAt DateTime  @default(now())
  startAt   DateTime?
  endAt     DateTime?
}

/**
 * ======================== 百家樂（既有） ========================
 */
model Round {
  id         String        @id @default(cuid())
  room       RoomCode
  phase      RoundPhase
  outcome    RoundOutcome?
  startedAt  DateTime      @default(now())
  endedAt    DateTime?
  endsAt     DateTime
  day        String
  seq        Int
  shoeJson   String
  resultJson String?
  dealerId   String?
  bets       Bet[]
  dealer     User?         @relation("RoundDealer", fields: [dealerId], references: [id])

  @@unique([room, day, seq])
  @@index([room, startedAt])
}

model Bet {
  id        String   @id @default(cuid())
  userId    String
  roundId   String
  side      BetSide
  amount    Int
  createdAt DateTime @default(now())
  round     Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roundId, side])
  @@index([userId, createdAt])
}

/**
 * ======================== 樂透（既有） ========================
 */
model LottoDraw {
  id        String     @id @default(cuid())
  code      Int
  drawAt    DateTime
  numbers   Int[]
  special   Int?
  pool      Int        @default(0)
  jackpot   Int        @default(0)
  status    String     @default("OPEN")
  createdAt DateTime   @default(now())
  day       DateTime   @default(now())
  daySeq    Int        @default(1)
  bets      LottoBet[]

  @@unique([day, daySeq])
  @@index([day, daySeq])
}

model LottoBet {
  id         String      @id @default(cuid())
  userId     String
  drawId     String
  picks      Int[]
  special    Int?
  amount     Int
  createdAt  DateTime    @default(now())
  tailParity TailParity?
  tailSize   TailSize?
  draw       LottoDraw   @relation(fields: [drawId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([drawId])
  @@index([drawId, tailParity])
  @@index([drawId, tailSize])
}

/**
 * ======================== 骰寶（既有） ========================
 */
model SicBoRound {
  id        String        @id @default(cuid())
  room      SicBoRoomCode
  phase     SicBoPhase
  dice      Int[]
  startedAt DateTime      @default(now())
  endedAt   DateTime?
  dealerId  String?
  bets      SicBoBet[]
  dealer    User?         @relation("SicBoDealer", fields: [dealerId], references: [id])
}

model SicBoBet {
  id        String       @id @default(cuid())
  userId    String
  roundId   String
  kind      SicBoBetKind
  amount    Int
  payload   Json?
  createdAt DateTime     @default(now())
  round     SicBoRound   @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roundId, kind])
  @@index([userId, createdAt])
}

/**
 * ============ 新增遊戲：輪盤 / 賽馬 / 5分彩 / 拉霸 / 21點 ============
 */
// 輪盤
model RouletteRound {
  id        String           @id @default(cuid())
  room      RouletteRoomCode
  phase     SicBoPhase
  result    Int?
  startedAt DateTime         @default(now())
  endedAt   DateTime?
  bets      RouletteBet[]

  @@index([room, startedAt])
}

model RouletteBet {
  id        String          @id @default(cuid())
  userId    String
  roundId   String
  kind      RouletteBetKind
  amount    Int
  payload   Json?
  createdAt DateTime        @default(now())
  round     RouletteRound   @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roundId, kind])
  @@index([userId, createdAt])
}

// 賽馬
model HorseRace {
  id        String         @id @default(cuid())
  track     HorseTrackCode
  phase     SicBoPhase
  horses    Json
  result    Json?
  startedAt DateTime       @default(now())
  endedAt   DateTime?
  bets      HorseBet[]

  @@index([track, startedAt])
}

model HorseBet {
  id        String       @id @default(cuid())
  userId    String
  raceId    String
  kind      HorseBetKind
  amount    Int
  payload   Json
  createdAt DateTime     @default(now())
  race      HorseRace    @relation(fields: [raceId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([raceId, kind])
  @@index([userId, createdAt])
}

// 5分彩
model FiveMinuteDraw {
  id        String          @id @default(cuid())
  room      FiveRoomCode
  phase     SicBoPhase
  numbers   Int[]
  drawAt    DateTime
  startedAt DateTime        @default(now())
  endedAt   DateTime?
  day       DateTime        @default(now())
  daySeq    Int             @default(1)
  bets      FiveMinuteBet[]

  @@unique([day, daySeq, room])
  @@index([room, drawAt])
}

model FiveMinuteBet {
  id        String         @id @default(cuid())
  userId    String
  drawId    String
  kind      FiveBetKind
  amount    Int
  payload   Json
  createdAt DateTime       @default(now())
  draw      FiveMinuteDraw @relation(fields: [drawId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([drawId, kind])
  @@index([userId, createdAt])
}

// 拉霸（水果機）
model SlotMachine {
  id         String       @id @default(cuid())
  room       SlotRoomCode
  name       String
  theme      String
  reelsJson  Json
  linesJson  Json
  paytable   Json
  volatility Int          @default(1)
  enabled    Boolean      @default(true)
  createdAt  DateTime     @default(now())

  spins SlotSpin[]
}

model SlotSpin {
  id        String      @id @default(cuid())
  userId    String
  machineId String
  bet       Int
  result    Json
  createdAt DateTime    @default(now())
  machine   SlotMachine @relation(fields: [machineId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([machineId, createdAt])
}

// 21點（個人）
model BlackjackPersonalGame {
  id          String     @id @default(cuid())
  userId      String
  phase       BJPhase
  shoeJson    Json
  dealerHand  Json
  playerHands Json
  baseBet     Int
  outcome     BJOutcome?
  createdAt   DateTime   @default(now())
  endedAt     DateTime?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

// 21點（多人桌）
model BlackjackTable {
  id        String          @id @default(cuid())
  room      BJTableRoomCode
  name      String
  minBet    Int             @default(10)
  maxBet    Int             @default(1000)
  seatCount Int             @default(7)
  active    Boolean         @default(true)
  createdAt DateTime        @default(now())

  seats  BlackjackTableSeat[]
  rounds BlackjackTableRound[]

  @@unique([room, name])
  @@index([active])
}

model BlackjackTableSeat {
  id       String         @id @default(cuid())
  tableId  String
  seatNo   Int
  userId   String?
  joinedAt DateTime?
  leftAt   DateTime?
  table    BlackjackTable @relation(fields: [tableId], references: [id], onDelete: Cascade)
  user     User?          @relation(fields: [userId], references: [id])

  @@unique([tableId, seatNo])
  @@index([tableId, userId])
}

model BlackjackTableRound {
  id         String         @id @default(cuid())
  tableId    String
  phase      BJPhase
  shoeJson   Json
  dealerHand Json
  startedAt  DateTime       @default(now())
  endedAt    DateTime?
  table      BlackjackTable @relation(fields: [tableId], references: [id], onDelete: Cascade)

  bets    BlackjackTableBet[]
  actions BlackjackTableAction[]

  @@index([tableId, startedAt])
}

model BlackjackTableBet {
  id        String              @id @default(cuid())
  roundId   String
  userId    String
  seatNo    Int
  amount    Int
  sideBet   Json?
  createdAt DateTime            @default(now())
  round     BlackjackTableRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roundId, userId])
}

model BlackjackTableAction {
  id        String              @id @default(cuid())
  roundId   String
  userId    String
  seatNo    Int
  action    BJAction
  payload   Json?
  createdAt DateTime            @default(now())
  round     BlackjackTableRound @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roundId, userId, createdAt])
}

/**
 * ======================== 活動 / 統計 / 排行 ========================
 */
model UserStatSnapshot {
  id          String     @id @default(cuid())
  userId      String
  period      StatPeriod
  windowStart DateTime
  windowEnd   DateTime
  room        RoomCode?
  gameBet     BigInt     @default(0)
  gamePayout  BigInt     @default(0)
  bonusIncome BigInt     @default(0)
  betsCount   Int        @default(0)
  winsCount   Int        @default(0)
  lossesCount Int        @default(0)
  netProfit   BigInt     @default(0)
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period, windowStart, windowEnd, room])
  @@index([period, room, windowStart, netProfit])
  @@index([userId, period, room])
}

model Season {
  id        String   @id @default(cuid())
  code      String   @unique
  title     String
  gameCode  GameCode
  startAt   DateTime
  endAt     DateTime
  rulesJson Json?
}

model SeasonLeaderboard {
  id        String   @id @default(cuid())
  seasonId  String
  userId    String
  score     BigInt   @default(0)
  rank      Int?
  updatedAt DateTime @updatedAt

  @@unique([seasonId, userId])
  @@index([seasonId, score])
}

/**
 * ======================== Jackpot（累積獎池基礎） ========================
 */
model JackpotPool {
  id        String   @id @default(cuid())
  code      String   @unique
  gameCode  GameCode
  pool      BigInt   @default(0)
  seed      BigInt   @default(0)
  takeBps   Int      @default(300)
  hitOdds   Float    @default(0.00001)
  updatedAt DateTime @updatedAt

  rules         JackpotRule[]
  contributions JackpotContribution[]
  dailyDraws    JackpotDailyDraw[]
}

model JackpotRule {
  id     String      @id @default(cuid())
  poolId String
  pool   JackpotPool @relation(fields: [poolId], references: [id], onDelete: Cascade)

  gameCode  GameCode
  roomKey   String?
  takeBps   Int      @default(50)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([poolId, gameCode, roomKey])
  @@index([active])
}

model JackpotContribution {
  id     String      @id @default(cuid())
  poolId String
  pool   JackpotPool @relation(fields: [poolId], references: [id], onDelete: Cascade)

  gameCode   GameCode
  roomKey    String?
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  amount     BigInt
  sourceKind String // BET_RAKE / MANUAL / ADJUST ...
  refId      String? // 來源單號
  createdAt  DateTime @default(now())

  @@index([poolId, createdAt])
  @@index([gameCode, roomKey, createdAt])
  @@index([userId, createdAt])
}

model JackpotDailyDraw {
  id     String      @id @default(cuid())
  poolId String
  pool   JackpotPool @relation(fields: [poolId], references: [id], onDelete: Cascade)

  drawDate       DateTime
  selectedUserId String?
  selectedUser   User?             @relation("UserSelected", fields: [selectedUserId], references: [id])
  amount         BigInt            @default(0)
  status         JackpotDrawStatus @default(PENDING)
  ledgerId       String?
  createdAt      DateTime          @default(now())
  paidAt         DateTime?

  @@unique([poolId, drawDate])
  @@index([status, drawDate])
  @@index([selectedUserId])
}

/**
 * ======================== 下注限額 / RTP 監測 ========================
 */
model BetLimit {
  id              String   @id @default(cuid())
  gameCode        GameCode
  roomKey         String?
  minBet          Int      @default(1)
  maxBet          Int      @default(100000)
  perUserDailyMax Int?
  cooldownMs      Int?
  updatedAt       DateTime @updatedAt

  @@unique([gameCode, roomKey])
}

model GameRtpSnapshot {
  id          String   @id @default(cuid())
  gameCode    GameCode
  roomKey     String?
  window      String
  windowStart DateTime
  windowEnd   DateTime
  betSum      BigInt   @default(0)
  payoutSum   BigInt   @default(0)
  createdAt   DateTime @default(now())

  @@unique([gameCode, roomKey, window, windowStart, windowEnd])
  @@index([gameCode, windowStart])
}

/**
 * ======================== 簽到 / 任務 ========================
 */
model UserCheckinState {
  userId          String    @id
  lastClaimedYmd  DateTime?
  streak          Int       @default(0)
  totalClaims     Int       @default(0)
  nextAvailableAt DateTime?
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyCheckinClaim {
  id           String   @id @default(cuid())
  userId       String
  ymd          DateTime
  amount       Int
  streakBefore Int
  streakAfter  Int
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ymd])
  @@index([userId, createdAt])
}

/**
 * ======================== 行銷 / 獎勵 ========================
 */
model RewardCampaign {
  id             String             @id @default(cuid())
  code           String             @unique
  kind           RewardCampaignKind
  title          String
  subtitle       String?
  body           String?
  imageUrl       String?
  popupTrigger   PopupTrigger       @default(LOGIN)
  autoPopup      Boolean            @default(true)
  enabled        Boolean            @default(true)
  priority       Int                @default(100)
  coinAmount     Int                @default(0)
  claimOnce      Boolean            @default(true)
  startAt        DateTime?
  endAt          DateTime?
  minTopupAmount Int?
  topupSince     DateTime?
  topupUntil     DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  impressions    PromoImpression[]
  claims         RewardClaim[]

  @@index([enabled, priority])
  @@index([kind, startAt, endAt])
}

model RewardClaim {
  id         String         @id @default(cuid())
  campaignId String
  userId     String
  amount     Int            @default(0)
  createdAt  DateTime       @default(now())
  campaign   RewardCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([campaignId, userId])
  @@index([userId, createdAt])
}

model PromoImpression {
  id         String         @id @default(cuid())
  campaignId String
  userId     String
  shownAt    DateTime       @default(now())
  campaign   RewardCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, campaignId, shownAt])
}

/**
 * ======================== 充值 / 金流（外部） ========================
 */
model ExternalTopup {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  status    String   @default("COMPLETED")
  provider  String?
  refCode   String?  @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

/**
 * ======================== 商城 ========================
 */
model ShopItem {
  id              String            @id @default(cuid())
  kind            ShopItemKind
  currency        ShopCurrency
  code            String            @unique
  title           String
  description     String?
  imageUrl        String?
  basePrice       Int
  vipDiscountable Boolean           @default(true)
  limitedQty      Int?
  startAt         DateTime?
  endAt           DateTime?
  visible         Boolean           @default(true)
  skus            ShopSku[]
  bundles         ShopBundleEntry[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  inventory  ShopInventory?
  stockLocks ShopStockLock[]
  assetLinks ItemAssetLink[]

  @@index([currency, visible, startAt, endAt])
}

model ShopSku {
  id                      String        @id @default(cuid())
  itemId                  String
  item                    ShopItem      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  priceOverride           Int?
  vipDiscountableOverride Boolean?
  currencyOverride        ShopCurrency?
  payloadJson             Json?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  purchases     ShopPurchase[]    @relation("SkuPurchases")
  bundleEntries ShopBundleEntry[] @relation("BundleSku")
  stockLocks    ShopStockLock[]

  @@index([itemId, createdAt])
}

model ShopBundleEntry {
  id     String   @id @default(cuid())
  itemId String
  item   ShopItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  skuId String
  sku   ShopSku @relation("BundleSku", fields: [skuId], references: [id], onDelete: Cascade)

  qty Int @default(1)
}

model ShopPurchase {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  skuId String
  sku   ShopSku @relation("SkuPurchases", fields: [skuId], references: [id])

  qty             Int      @default(1)
  pricePaid       Int
  vipDiscountRate Float
  source          String   @default("SHOP")
  idempotencyKey  String   @unique
  createdAt       DateTime @default(now())

  refund ShopRefund?
  gifts  Gift[]

  @@index([userId, createdAt])
  @@index([skuId])
}

model DiscountRule {
  id         String    @id @default(cuid())
  scope      String
  targetCode String?
  vipMin     Int?
  percentOff Int?
  startAt    DateTime?
  endAt      DateTime?
  enabled    Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ShopInventory {
  itemId    String   @id
  totalQty  Int?
  soldQty   Int      @default(0)
  lockedQty Int      @default(0)
  updatedAt DateTime @updatedAt
  item      ShopItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model ShopStockLock {
  id        String   @id @default(cuid())
  itemId    String
  skuId     String
  qty       Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  released  Boolean  @default(false)
  item      ShopItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  sku       ShopSku  @relation(fields: [skuId], references: [id], onDelete: Cascade)

  @@index([itemId, expiresAt, released])
}

model PurchaseLimitRule {
  id         String    @id @default(cuid())
  scope      String
  targetCode String?
  perUserDay Int?
  perUserAll Int?
  perSiteDay Int?
  startAt    DateTime?
  endAt      DateTime?
  enabled    Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  usages PurchaseLimitUsage[]

  @@index([scope, targetCode, enabled, startAt, endAt])
}

model PurchaseLimitUsage {
  id      String            @id @default(cuid())
  ruleId  String
  userId  String?
  ymd     DateTime
  usedQty Int               @default(0)
  rule    PurchaseLimitRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@unique([ruleId, userId, ymd])
  @@index([ruleId, ymd])
}

model PromoCode {
  id         String    @id @default(cuid())
  code       String    @unique
  percentOff Int?
  amountOff  Int?
  maxUse     Int?
  used       Int       @default(0)
  startAt    DateTime?
  endAt      DateTime?
  enabled    Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  redemptions PromoRedemption[]
}

model PromoRedemption {
  id     String    @id @default(cuid())
  codeId String
  userId String
  usedAt DateTime  @default(now())
  code   PromoCode @relation(fields: [codeId], references: [id], onDelete: Cascade)

  @@unique([codeId, userId])
  @@index([userId, usedAt])
}

model ShopRefund {
  id         String       @id @default(cuid())
  purchaseId String       @unique
  reason     String?
  approvedBy String?
  createdAt  DateTime     @default(now())
  purchase   ShopPurchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

model Gift {
  id         String        @id @default(cuid())
  senderId   String
  receiverId String
  purchaseId String?
  message    String?
  createdAt  DateTime      @default(now())
  openedAt   DateTime?
  refundedAt DateTime?
  sender     User          @relation("GiftSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User          @relation("GiftReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  purchase   ShopPurchase? @relation(fields: [purchaseId], references: [id])

  @@index([receiverId, openedAt])
  @@index([senderId, createdAt])
}

/**
 * ======================== 媒體資產 ========================
 */
model MediaAsset {
  id        String   @id @default(cuid())
  kind      String
  code      String   @unique
  url       String
  meta      Json?
  createdAt DateTime @default(now())

  itemLinks ItemAssetLink[]
}

model ItemAssetLink {
  id      String     @id @default(cuid())
  itemId  String
  assetId String
  purpose String
  item    ShopItem   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  asset   MediaAsset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([itemId, purpose])
}

/**
 * ======================== 聊天 / 語音 ========================
 */
model ChatMessage {
  id        String          @id @default(cuid())
  room      String
  userId    String
  type      ChatMessageType @default(USER)
  body      String
  hidden    Boolean         @default(false)
  createdAt DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([room, createdAt])
  @@index([userId, createdAt])
}

model VoiceRoom {
  id        String   @id @default(cuid())
  gameCode  GameCode
  roomKey   String
  createdAt DateTime @default(now())
  active    Boolean  @default(true)

  participants VoiceParticipant[]
  sessions     VoiceSession[]

  @@unique([gameCode, roomKey])
  @@index([active])
}

model VoiceParticipant {
  id       String    @id @default(cuid())
  roomId   String
  userId   String
  joinedAt DateTime  @default(now())
  muted    Boolean   @default(false)
  deafened Boolean   @default(false)
  room     VoiceRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@index([roomId, joinedAt])
}

model VoiceSession {
  id       String    @id @default(cuid())
  userId   String
  roomId   String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room     VoiceRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId, joinedAt])
}

/**
 * ======================== 帳號：驗證 / 密碼 ========================
 */
model EmailVerifyToken {
  id        String    @id @default(cuid())
  userId    String    @unique
  token     String    @unique
  expiredAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String    @unique
  token     String    @unique
  expiredAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/**
 * ======================== 個人背包 ========================
 */
model UserInventory {
  id         String            @id @default(cuid())
  userId     String
  type       InventoryItemType
  refId      String?
  quantity   Int               @default(1)
  equipped   Boolean           @default(false)
  acquiredAt DateTime          @default(now())
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, refId])
  @@index([userId, type])
}

/**
 * ======================== 大廳彈窗公告 ========================
 */
model LobbyPopup {
  id          String    @id @default(cuid())
  code        String    @unique
  title       String
  body        String
  startAt     DateTime?
  endAt       DateTime?
  priority    Int       @default(100)
  enabled     Boolean   @default(true)
  dismissible Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  acks LobbyPopupAck[]

  @@index([enabled, startAt, endAt, priority])
}

model LobbyPopupAck {
  id          String     @id @default(cuid())
  popupId     String
  userId      String
  shownAt     DateTime   @default(now())
  dismissedAt DateTime?
  popup       LobbyPopup @relation(fields: [popupId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, shownAt])
}

/**
 * ======================== 私訊（DM） ========================
 */
model DirectThread {
  id            String    @id @default(cuid())
  topic         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  lastMessageAt DateTime?

  participants DirectParticipant[]
  messages     DirectMessage[]

  @@index([lastMessageAt])
}

model DirectParticipant {
  id       String       @id @default(cuid())
  threadId String
  userId   String
  role     String?
  joinedAt DateTime     @default(now())
  thread   DirectThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId, userId])
  @@index([userId, joinedAt])
}

model DirectMessage {
  id        String            @id @default(cuid())
  threadId  String
  senderId  String?
  kind      DirectMessageKind @default(TEXT)
  body      String
  meta      Json?
  createdAt DateTime          @default(now())
  thread    DirectThread      @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender    User?             @relation("UserSent", fields: [senderId], references: [id])

  readReceipts DirectReadReceipt[]

  @@index([threadId, createdAt])
  @@index([senderId, createdAt])
  @@index([kind, createdAt])
}

model DirectReadReceipt {
  id        String        @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime      @default(now())
  message   DirectMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([userId, readAt])
}

/**
 * ======================== Presence / 關聯內容 ========================
 */
model RoomPresence {
  id       String    @id @default(cuid())
  userId   String
  gameCode GameCode
  roomKey  String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  seatNo   Int?
  seatMeta Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([gameCode, roomKey, joinedAt])
  @@index([userId, leftAt])
  @@index([gameCode, roomKey, seatNo])
}

/**
 * ======================== 通知 / 推播 ========================
 */
model Notification {
  id        String    @id @default(cuid())
  userId    String
  channel   String
  title     String
  body      String
  data      Json?
  status    String    @default("NEW")
  createdAt DateTime  @default(now())
  seenAt    DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status, createdAt])
}

model PushToken {
  id         String    @id @default(cuid())
  userId     String
  provider   String
  token      String
  deviceInfo Json?
  createdAt  DateTime  @default(now())
  revokedAt  DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, token])
  @@index([userId, createdAt])
}

/**
 * ======================== 安全 / 裝置 / Session / 2FA / 風控 ========================
 */
model UserDevice {
  id         String    @id @default(cuid())
  userId     String
  deviceId   String?
  userAgent  String?
  ip         String?
  createdAt  DateTime  @default(now())
  lastSeenAt DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, lastSeenAt])
}

model UserSession {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  revokedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expiresAt, revokedAt])
}

model TwoFactorSecret {
  userId    String   @id
  secret    String
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RiskScore {
  userId    String   @id
  score     Int      @default(0)
  reasons   Json?
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KycProfile {
  userId      String    @id
  status      String    @default("PENDING")
  docImages   Json?
  submittedAt DateTime?
  reviewedAt  DateTime?
  reviewerId  String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CashRequest {
  id          String    @id @default(cuid())
  userId      String
  direction   String // DEPOSIT / WITHDRAW
  amount      Int
  status      String    @default("PENDING")
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status, createdAt])
}

/**
 * ======================== 餘額快照（營運/稽核） ========================
 */
model BalanceSnapshot {
  id        String   @id @default(cuid())
  userId    String
  ymd       DateTime
  wallet    Int      @default(0)
  bank      Int      @default(0)
  diamond   Int      @default(0)
  ticket    Int      @default(0)
  gacha     Int      @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ymd])
  @@index([ymd])
}

/**
 * ======================== 功能旗標 / 實驗 / 多語 ========================
 */
model FeatureFlag {
  id        String   @id @default(cuid())
  code      String   @unique
  enabled   Boolean  @default(false)
  payload   Json?
  updatedAt DateTime @updatedAt
}

model Experiment {
  id       String    @id @default(cuid())
  code     String    @unique
  variants Json
  startAt  DateTime?
  endAt    DateTime?
  enabled  Boolean   @default(true)
}

model ExperimentAssignment {
  id           String   @id @default(cuid())
  experimentId String
  userId       String
  variant      String
  assignedAt   DateTime @default(now())

  @@unique([experimentId, userId])
  @@index([userId, assignedAt])
}

model I18nMessage {
  id        String   @id @default(cuid())
  ns        String
  key       String
  locale    String
  value     String
  updatedAt DateTime @updatedAt

  @@unique([ns, key, locale])
}

/**
 * ======================== 背景作業 / 稽核 / 維護 / Webhook ========================
 */
model Job {
  id        String    @id @default(cuid())
  code      String
  payload   Json?
  status    String    @default("PENDING")
  runAt     DateTime?
  tries     Int       @default(0)
  lastError String?
  createdAt DateTime  @default(now())

  @@index([code, status, runAt])
}

model EventLog {
  id        String   @id @default(cuid())
  topic     String
  userId    String?
  ref       String?
  data      Json?
  createdAt DateTime @default(now())
}

model AdminAuditLog {
  id        String   @id @default(cuid())
  adminId   String
  action    String
  target    String?
  detail    Json?
  createdAt DateTime @default(now())
  admin     User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId, createdAt])
}

model MaintenanceWindow {
  id        String   @id @default(cuid())
  code      String   @unique
  title     String
  body      String?
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
}

model WebhookEvent {
  id        String    @id @default(cuid())
  endpoint  String
  payload   Json
  status    String    @default("PENDING")
  retries   Int       @default(0)
  nextRetry DateTime?
  createdAt DateTime  @default(now())

  @@index([endpoint, status])
}

/**
 * ======================== 邀請回饋（規則 / 撥款） ========================
 */
model ReferralRule {
  id        String   @id @default(cuid())
  code      String   @unique
  ruleJson  Json
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
}

model ReferralPayout {
  id        String   @id @default(cuid())
  inviterId String
  inviteeId String
  amount    Int
  reason    String?
  createdAt DateTime @default(now())
  inviter   User     @relation("ReferralInviter", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee   User     @relation("ReferralInvitee", fields: [inviteeId], references: [id], onDelete: Cascade)

  @@index([inviterId, createdAt])
  @@index([inviteeId, createdAt])
}

/**
 * ======================== 追蹤 / 造訪 / 讚 / 封鎖 ========================
 */
model Follow {
  id         String   @id @default(cuid())
  followerId String
  followeeId String
  createdAt  DateTime @default(now())
  follower   User     @relation("FollowFollower", fields: [followerId], references: [id], onDelete: Cascade)
  followee   User     @relation("FollowFollowee", fields: [followeeId], references: [id], onDelete: Cascade)

  @@unique([followerId, followeeId])
  @@index([followeeId, createdAt])
}

model ProfileVisit {
  id            String   @id @default(cuid())
  profileUserId String
  viewerUserId  String
  visitedAt     DateTime @default(now())
  profileUser   User     @relation("ProfileUser", fields: [profileUserId], references: [id], onDelete: Cascade)
  viewerUser    User     @relation("ProfileViewer", fields: [viewerUserId], references: [id], onDelete: Cascade)

  @@index([profileUserId, visitedAt])
  @@index([viewerUserId, visitedAt])
}

model PostMedia {
  id        String   @id @default(cuid())
  postId    String
  url       String
  kind      String // image / video
  meta      Json?
  createdAt DateTime @default(now())
  post      WallPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model UserKudos {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  createdAt  DateTime @default(now())
  meta       Json?

  fromUser User @relation("KudosFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("KudosTo", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
  @@index([toUserId, createdAt])
  @@index([fromUserId, createdAt])
}

/**
 * ⚠️ 這裡不要再重複宣告 enum BlockLevel 了（它已在檔案最上面宣告）
 */

model UserBlock {
  id        String     @id @default(cuid())
  blockerId String
  blockedId String
  level     BlockLevel @default(ALL)
  reason    String?
  createdAt DateTime   @default(now())
  expiresAt DateTime?

  blocker User @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
